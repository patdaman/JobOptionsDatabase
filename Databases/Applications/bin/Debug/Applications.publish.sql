/*
Deployment script for Applications

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Applications"
:setvar DefaultFilePrefix "Applications"
:setvar DefaultDataPath "D:\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[Address]...';


GO
CREATE TABLE [dbo].[Address] (
    [id]          INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId] INT           NOT NULL,
    [AddressType] VARCHAR (50)  NOT NULL,
    [Address1]    VARCHAR (256) NOT NULL,
    [Address2]    VARCHAR (256) NULL,
    [Address3]    VARCHAR (256) NULL,
    [City]        VARCHAR (128) NOT NULL,
    [State]       VARCHAR (50)  NOT NULL,
    [PostalCode]  VARCHAR (50)  NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Address] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[AddressTypes]...';


GO
CREATE TABLE [dbo].[AddressTypes] (
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_AddressTypes] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[AlternateNames]...';


GO
CREATE TABLE [dbo].[AlternateNames] (
    [id]          INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId] INT           NOT NULL,
    [FirstName]   VARCHAR (128) NOT NULL,
    [MiddleName]  VARCHAR (50)  NULL,
    [LastName]    VARCHAR (128) NOT NULL,
    [CreateDate]  DATETIME2 (7) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_AlternateNames] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Applicant]...';


GO
CREATE TABLE [dbo].[Applicant] (
    [id]             INT           IDENTITY (10000, 1) NOT NULL,
    [FirstName]      VARCHAR (128) NOT NULL,
    [LastName]       VARCHAR (128) NOT NULL,
    [MiddleName]     VARCHAR (128) NULL,
    [MiddleInitial]  AS            (LEFT([MiddleName], (1))),
    [SocialSecurity] VARCHAR (12)  NULL,
    [Birthdate]      DATETIME2 (0) NULL,
    [Gender]         VARCHAR (50)  NULL,
    [Ethnicity]      VARCHAR (50)  NULL,
    [Disabled]       BIT           NOT NULL,
    [CreateDate]     DATETIME2 (0) NOT NULL,
    [CreateUser]     VARCHAR (128) NOT NULL,
    [ModifyDate]     DATETIME2 (0) NOT NULL,
    [ModifyUser]     VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Applicant] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[Application]...';


GO
CREATE TABLE [dbo].[Application] (
    [id]                   INT             IDENTITY (10000, 1) NOT NULL,
    [ApplicantId]          INT             NOT NULL,
    [ApplicationDate]      DATETIME2 (7)   NOT NULL,
    [Position]             VARCHAR (50)    NULL,
    [Consideration]        VARCHAR (128)   NULL,
    [Status]               VARCHAR (50)    NULL,
    [Hired]                BIT             NOT NULL,
    [PreviousApplication]  BIT             NULL,
    [PreviousEmployment]   BIT             NULL,
    [PreviouslyTerminated] BIT             NULL,
    [CanWork]              BIT             NULL,
    [DriversLicenseState]  NCHAR (2)       NULL,
    [AvailableDate]        DATETIME2 (0)   NULL,
    [OnCall]               BIT             NOT NULL,
    [Temporary]            BIT             NOT NULL,
    [Weekends]             BIT             NOT NULL,
    [Evenings]             BIT             NOT NULL,
    [Nights]               BIT             NOT NULL,
    [Referral]             VARCHAR (256)   NULL,
    [LeaveReason]          VARCHAR (512)   NULL,
    [LastSupervisor]       VARCHAR (128)   NULL,
    [AuthorizationDate]    DATETIME2 (7)   NULL,
    [Signature]            VARBINARY (512) NULL,
    [CreateDate]           DATETIME2 (0)   NOT NULL,
    [CreateUser]           VARCHAR (128)   NOT NULL,
    [ModifyDate]           DATETIME2 (0)   NULL,
    [ModifyUser]           VARCHAR (128)   NOT NULL,
    CONSTRAINT [PK_Application] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[ConsiderationTypes]...';


GO
CREATE TABLE [dbo].[ConsiderationTypes] (
    [Name]        VARCHAR (128) NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_ConsiderationTypes] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[DisabledDocument]...';


GO
CREATE TABLE [dbo].[DisabledDocument] (
    [id]           INT             IDENTITY (10000, 1) NOT NULL,
    [ApplicantId]  INT             NOT NULL,
    [DocumentType] VARCHAR (50)    NOT NULL,
    [DocumentText] VARCHAR (MAX)   NULL,
    [Document]     VARBINARY (MAX) NULL,
    [CreateDate]   DATETIME2 (0)   NOT NULL,
    [CreateUser]   VARCHAR (128)   NOT NULL,
    [ModifyDate]   DATETIME2 (0)   NOT NULL,
    [ModifyUser]   VARCHAR (128)   NOT NULL,
    CONSTRAINT [PK_DisabledDocument] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[DocumentType]...';


GO
CREATE TABLE [dbo].[DocumentType] (
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_DocumentType] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[Education]...';


GO
CREATE TABLE [dbo].[Education] (
    [id]            INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId]   INT           NOT NULL,
    [ApplicationId] INT           NULL,
    [Level]         VARCHAR (128) NOT NULL,
    [Location]      VARCHAR (256) NULL,
    [YearsAttended] FLOAT (53)    NULL,
    [Graduate]      BIT           NULL,
    [Subjects]      VARCHAR (256) NULL,
    [DegreeType]    VARCHAR (50)  NULL,
    [Major]         VARCHAR (128) NULL,
    [GPA]           FLOAT (53)    NULL,
    [City]          VARCHAR (128) NULL,
    [State]         VARCHAR (50)  NULL,
    [Address]       VARCHAR (256) NULL,
    [Other]         VARCHAR (MAX) NULL,
    [CreateDate]    DATETIME2 (0) NOT NULL,
    [CreateUser]    VARCHAR (128) NOT NULL,
    [ModifyDate]    DATETIME2 (0) NOT NULL,
    [ModifyUser]    VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Education] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[EthnicityTypes]...';


GO
CREATE TABLE [dbo].[EthnicityTypes] (
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_EthnicityTypes] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[GenderTypes]...';


GO
CREATE TABLE [dbo].[GenderTypes] (
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_GenderTypes] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[ObjectMap]...';


GO
CREATE TABLE [dbo].[ObjectMap] (
    [id]          INT           IDENTITY (10000, 1) NOT NULL,
    [Name]        VARCHAR (128) NOT NULL,
    [Description] VARCHAR (256) NULL,
    [TableName]   VARCHAR (128) NOT NULL,
    [SchemaName]  VARCHAR (128) NOT NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_ObjectMap] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[ObjectMap].[UNQ_ObjectMap]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UNQ_ObjectMap]
    ON [dbo].[ObjectMap]([Name] ASC, [Active] ASC) WHERE ([Active]=(1));


GO
PRINT N'Creating [dbo].[Phone]...';


GO
CREATE TABLE [dbo].[Phone] (
    [id]          INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId] INT           NOT NULL,
    [PhoneType]   VARCHAR (50)  NOT NULL,
    [PhoneNumber] VARCHAR (50)  NOT NULL,
    [Note]        VARCHAR (256) NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Phone] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[PhoneTypes]...';


GO
CREATE TABLE [dbo].[PhoneTypes] (
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_PhoneTypes] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[PreviousEmployer]...';


GO
CREATE TABLE [dbo].[PreviousEmployer] (
    [id]                   INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId]          INT           NOT NULL,
    [ApplicationId]        INT           NULL,
    [CompanyName]          VARCHAR (128) NOT NULL,
    [From]                 DATETIME2 (7) NOT NULL,
    [To]                   DATETIME2 (7) NULL,
    [AddressId]            INT           NULL,
    [Duties]               VARCHAR (256) NULL,
    [SupervisorName]       VARCHAR (256) NULL,
    [SupervisorTitle]      VARCHAR (128) NULL,
    [SupervisorDepartment] VARCHAR (128) NULL,
    [SupervisorPhoneId]    INT           NULL,
    [SupervisorContact]    BIT           NULL,
    [CreateDate]           DATETIME2 (0) NOT NULL,
    [CreateUser]           VARCHAR (128) NOT NULL,
    [ModifyDate]           DATETIME2 (0) NOT NULL,
    [ModifyUser]           VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_PreviousEmployer] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[References]...';


GO
CREATE TABLE [dbo].[References] (
    [id]              INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId]     INT           NOT NULL,
    [ApplicationId]   INT           NULL,
    [Name]            VARCHAR (256) NOT NULL,
    [Address]         VARCHAR (512) NULL,
    [Business]        VARCHAR (256) NULL,
    [YearsAcquainted] VARCHAR (50)  NULL,
    [CreateDate]      DATETIME2 (0) NOT NULL,
    [CreateUser]      VARCHAR (128) NOT NULL,
    [ModifyDate]      DATETIME2 (0) NOT NULL,
    [ModifyUser]      VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_References] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[ServiceRecord]...';


GO
CREATE TABLE [dbo].[ServiceRecord] (
    [id]            INT           IDENTITY (10000, 1) NOT NULL,
    [ApplicantId]   INT           NOT NULL,
    [ApplicationId] INT           NULL,
    [Branch]        VARCHAR (50)  NOT NULL,
    [DischargeDate] DATETIME2 (7) NULL,
    [DischargeRank] VARCHAR (128) NULL,
    [CreateDate]    DATETIME2 (0) NOT NULL,
    [CreateUser]    VARCHAR (128) NOT NULL,
    [ModifyDate]    DATETIME2 (0) NOT NULL,
    [ModifyUser]    VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_ServiceRecord] PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[StatusTypes]...';


GO
CREATE TABLE [dbo].[StatusTypes] (
    [Name]        VARCHAR (50)  NOT NULL,
    [Description] VARCHAR (256) NULL,
    [Active]      BIT           NOT NULL,
    [CreateDate]  DATETIME2 (0) NOT NULL,
    [CreateUser]  VARCHAR (128) NOT NULL,
    [ModifyDate]  DATETIME2 (0) NOT NULL,
    [ModifyUser]  VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_StatusTypes] PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[DF_Address_CreateDate]...';


GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Address_CreateUser]...';


GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_Address_ModifyUser]...';


GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_AddressTypes_CreateUser]...';


GO
ALTER TABLE [dbo].[AddressTypes]
    ADD CONSTRAINT [DF_AddressTypes_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_AddressTypes_ModifyUser]...';


GO
ALTER TABLE [dbo].[AddressTypes]
    ADD CONSTRAINT [DF_AddressTypes_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_AlternateNames_CreateDate]...';


GO
ALTER TABLE [dbo].[AlternateNames]
    ADD CONSTRAINT [DF_AlternateNames_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_AlternateNames_CreateUser]...';


GO
ALTER TABLE [dbo].[AlternateNames]
    ADD CONSTRAINT [DF_AlternateNames_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_Applicant_Disabled]...';


GO
ALTER TABLE [dbo].[Applicant]
    ADD CONSTRAINT [DF_Applicant_Disabled] DEFAULT ((1)) FOR [Disabled];


GO
PRINT N'Creating [dbo].[DF_Applicant_CreateDate]...';


GO
ALTER TABLE [dbo].[Applicant]
    ADD CONSTRAINT [DF_Applicant_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Applicant_CreateUser]...';


GO
ALTER TABLE [dbo].[Applicant]
    ADD CONSTRAINT [DF_Applicant_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_Applicant_ModifyDate]...';


GO
ALTER TABLE [dbo].[Applicant]
    ADD CONSTRAINT [DF_Applicant_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_Applicant_ModifyUser]...';


GO
ALTER TABLE [dbo].[Applicant]
    ADD CONSTRAINT [DF_Applicant_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_Application_ApplicationDate]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_ApplicationDate] DEFAULT (getdate()) FOR [ApplicationDate];


GO
PRINT N'Creating [dbo].[DF_Application_Hired]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_Hired] DEFAULT ((0)) FOR [Hired];


GO
PRINT N'Creating [dbo].[DF_Application_PreviousApplication]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_PreviousApplication] DEFAULT ((0)) FOR [PreviousApplication];


GO
PRINT N'Creating [dbo].[DF_Application_PreviousEmployment]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_PreviousEmployment] DEFAULT ((0)) FOR [PreviousEmployment];


GO
PRINT N'Creating [dbo].[DF_Application_PreviouslyTerminated]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_PreviouslyTerminated] DEFAULT ((0)) FOR [PreviouslyTerminated];


GO
PRINT N'Creating [dbo].[DF_Application_CanWork]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_CanWork] DEFAULT ((1)) FOR [CanWork];


GO
PRINT N'Creating [dbo].[DF_Application_OnCall]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_OnCall] DEFAULT ((0)) FOR [OnCall];


GO
PRINT N'Creating [dbo].[DF_Application_Temporary]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_Temporary] DEFAULT ((0)) FOR [Temporary];


GO
PRINT N'Creating [dbo].[DF_Application_Weekends]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_Weekends] DEFAULT ((0)) FOR [Weekends];


GO
PRINT N'Creating [dbo].[DF_Application_Evenings]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_Evenings] DEFAULT ((0)) FOR [Evenings];


GO
PRINT N'Creating [dbo].[DF_Application_Nights]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_Nights] DEFAULT ((0)) FOR [Nights];


GO
PRINT N'Creating [dbo].[DF_Application_CreateDate]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Application_CreateUser]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_Application_ModifyDate]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_Application_ModifyUser]...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_ConsiderationTypes_Active]...';


GO
ALTER TABLE [dbo].[ConsiderationTypes]
    ADD CONSTRAINT [DF_ConsiderationTypes_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_ConsiderationTypes_CreateDate]...';


GO
ALTER TABLE [dbo].[ConsiderationTypes]
    ADD CONSTRAINT [DF_ConsiderationTypes_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_ConsiderationTypes_CreateUser]...';


GO
ALTER TABLE [dbo].[ConsiderationTypes]
    ADD CONSTRAINT [DF_ConsiderationTypes_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_ConsiderationTypes_ModifyDate]...';


GO
ALTER TABLE [dbo].[ConsiderationTypes]
    ADD CONSTRAINT [DF_ConsiderationTypes_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_ConsiderationTypes_ModifyUser]...';


GO
ALTER TABLE [dbo].[ConsiderationTypes]
    ADD CONSTRAINT [DF_ConsiderationTypes_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_DisabledDocument_CreateDate]...';


GO
ALTER TABLE [dbo].[DisabledDocument]
    ADD CONSTRAINT [DF_DisabledDocument_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_DisabledDocument_CreateUser]...';


GO
ALTER TABLE [dbo].[DisabledDocument]
    ADD CONSTRAINT [DF_DisabledDocument_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_DisabledDocument_ModifyDate]...';


GO
ALTER TABLE [dbo].[DisabledDocument]
    ADD CONSTRAINT [DF_DisabledDocument_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_DisabledDocument_ModifyUser]...';


GO
ALTER TABLE [dbo].[DisabledDocument]
    ADD CONSTRAINT [DF_DisabledDocument_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_DocumentType_Active]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumentType_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_DocumentType_CreateDate]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumentType_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_DocumentType_CreateUser]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumentType_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_DocumentType_ModifyDate]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumentType_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_DocumentType_ModifyUser]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumentType_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_Education_Graduate]...';


GO
ALTER TABLE [dbo].[Education]
    ADD CONSTRAINT [DF_Education_Graduate] DEFAULT ((0)) FOR [Graduate];


GO
PRINT N'Creating [dbo].[DF_Education_CreateDate]...';


GO
ALTER TABLE [dbo].[Education]
    ADD CONSTRAINT [DF_Education_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Education_CreateUser]...';


GO
ALTER TABLE [dbo].[Education]
    ADD CONSTRAINT [DF_Education_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_Education_ModifyDate]...';


GO
ALTER TABLE [dbo].[Education]
    ADD CONSTRAINT [DF_Education_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_Education_ModifyUser]...';


GO
ALTER TABLE [dbo].[Education]
    ADD CONSTRAINT [DF_Education_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_EthnicityTypes_Active]...';


GO
ALTER TABLE [dbo].[EthnicityTypes]
    ADD CONSTRAINT [DF_EthnicityTypes_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_EthnicityTypes_CreateDate]...';


GO
ALTER TABLE [dbo].[EthnicityTypes]
    ADD CONSTRAINT [DF_EthnicityTypes_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_EthnicityTypes_CreateUser]...';


GO
ALTER TABLE [dbo].[EthnicityTypes]
    ADD CONSTRAINT [DF_EthnicityTypes_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_EthnicityTypes_ModifyDate]...';


GO
ALTER TABLE [dbo].[EthnicityTypes]
    ADD CONSTRAINT [DF_EthnicityTypes_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_EthnicityTypes_ModifyUser]...';


GO
ALTER TABLE [dbo].[EthnicityTypes]
    ADD CONSTRAINT [DF_EthnicityTypes_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_GenderTypes_Active]...';


GO
ALTER TABLE [dbo].[GenderTypes]
    ADD CONSTRAINT [DF_GenderTypes_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_GenderTypes_CreateDate]...';


GO
ALTER TABLE [dbo].[GenderTypes]
    ADD CONSTRAINT [DF_GenderTypes_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_GenderTypes_CreateUser]...';


GO
ALTER TABLE [dbo].[GenderTypes]
    ADD CONSTRAINT [DF_GenderTypes_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_GenderTypes_ModifyDate]...';


GO
ALTER TABLE [dbo].[GenderTypes]
    ADD CONSTRAINT [DF_GenderTypes_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_GenderTypes_ModifyUser]...';


GO
ALTER TABLE [dbo].[GenderTypes]
    ADD CONSTRAINT [DF_GenderTypes_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_ObjectMap_SchemaName]...';


GO
ALTER TABLE [dbo].[ObjectMap]
    ADD CONSTRAINT [DF_ObjectMap_SchemaName] DEFAULT ('dbo') FOR [SchemaName];


GO
PRINT N'Creating [dbo].[DF_ObjectMap_Active]...';


GO
ALTER TABLE [dbo].[ObjectMap]
    ADD CONSTRAINT [DF_ObjectMap_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_ObjectMap_CreateDate]...';


GO
ALTER TABLE [dbo].[ObjectMap]
    ADD CONSTRAINT [DF_ObjectMap_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_ObjectMap_CreateUser]...';


GO
ALTER TABLE [dbo].[ObjectMap]
    ADD CONSTRAINT [DF_ObjectMap_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_ObjectMap_ModifyDate]...';


GO
ALTER TABLE [dbo].[ObjectMap]
    ADD CONSTRAINT [DF_ObjectMap_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_ObjectMap_ModifyUser]...';


GO
ALTER TABLE [dbo].[ObjectMap]
    ADD CONSTRAINT [DF_ObjectMap_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_Phone_CreateDate]...';


GO
ALTER TABLE [dbo].[Phone]
    ADD CONSTRAINT [DF_Phone_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Phone_CreateUser]...';


GO
ALTER TABLE [dbo].[Phone]
    ADD CONSTRAINT [DF_Phone_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_Phone_ModifyDate]...';


GO
ALTER TABLE [dbo].[Phone]
    ADD CONSTRAINT [DF_Phone_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_Phone_ModifyUser]...';


GO
ALTER TABLE [dbo].[Phone]
    ADD CONSTRAINT [DF_Phone_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_PhoneTypes_Active]...';


GO
ALTER TABLE [dbo].[PhoneTypes]
    ADD CONSTRAINT [DF_PhoneTypes_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_PhoneTypes_CreateDate]...';


GO
ALTER TABLE [dbo].[PhoneTypes]
    ADD CONSTRAINT [DF_PhoneTypes_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_PhoneTypes_CreateUser]...';


GO
ALTER TABLE [dbo].[PhoneTypes]
    ADD CONSTRAINT [DF_PhoneTypes_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_PhoneTypes_ModifyDate]...';


GO
ALTER TABLE [dbo].[PhoneTypes]
    ADD CONSTRAINT [DF_PhoneTypes_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_PhoneTypes_ModifyUser]...';


GO
ALTER TABLE [dbo].[PhoneTypes]
    ADD CONSTRAINT [DF_PhoneTypes_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_PreviousEmployer_SupervisorContact]...';


GO
ALTER TABLE [dbo].[PreviousEmployer]
    ADD CONSTRAINT [DF_PreviousEmployer_SupervisorContact] DEFAULT ((1)) FOR [SupervisorContact];


GO
PRINT N'Creating [dbo].[DF_PreviousEmployer_CreateUser]...';


GO
ALTER TABLE [dbo].[PreviousEmployer]
    ADD CONSTRAINT [DF_PreviousEmployer_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_PreviousEmployer_ModifyUser]...';


GO
ALTER TABLE [dbo].[PreviousEmployer]
    ADD CONSTRAINT [DF_PreviousEmployer_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_References_CreateUser]...';


GO
ALTER TABLE [dbo].[References]
    ADD CONSTRAINT [DF_References_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_References_ModifyUser]...';


GO
ALTER TABLE [dbo].[References]
    ADD CONSTRAINT [DF_References_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_ServiceRecord_CreateDate]...';


GO
ALTER TABLE [dbo].[ServiceRecord]
    ADD CONSTRAINT [DF_ServiceRecord_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_ServiceRecord_CreateUser]...';


GO
ALTER TABLE [dbo].[ServiceRecord]
    ADD CONSTRAINT [DF_ServiceRecord_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_ServiceRecord_ModifyDate]...';


GO
ALTER TABLE [dbo].[ServiceRecord]
    ADD CONSTRAINT [DF_ServiceRecord_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_ServiceRecord_ModifyUser]...';


GO
ALTER TABLE [dbo].[ServiceRecord]
    ADD CONSTRAINT [DF_ServiceRecord_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[DF_StatusTypes_Active]...';


GO
ALTER TABLE [dbo].[StatusTypes]
    ADD CONSTRAINT [DF_StatusTypes_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [dbo].[DF_StatusTypes_CreateDate]...';


GO
ALTER TABLE [dbo].[StatusTypes]
    ADD CONSTRAINT [DF_StatusTypes_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_StatusTypes_CreateUser]...';


GO
ALTER TABLE [dbo].[StatusTypes]
    ADD CONSTRAINT [DF_StatusTypes_CreateUser] DEFAULT (suser_sname()) FOR [CreateUser];


GO
PRINT N'Creating [dbo].[DF_StatusTypes_ModifyDate]...';


GO
ALTER TABLE [dbo].[StatusTypes]
    ADD CONSTRAINT [DF_StatusTypes_ModifyDate] DEFAULT (getdate()) FOR [ModifyDate];


GO
PRINT N'Creating [dbo].[DF_StatusTypes_ModifyUser]...';


GO
ALTER TABLE [dbo].[StatusTypes]
    ADD CONSTRAINT [DF_StatusTypes_ModifyUser] DEFAULT (suser_sname()) FOR [ModifyUser];


GO
PRINT N'Creating [dbo].[FK_Address_AddressTypes]...';


GO
ALTER TABLE [dbo].[Address] WITH NOCHECK
    ADD CONSTRAINT [FK_Address_AddressTypes] FOREIGN KEY ([AddressType]) REFERENCES [dbo].[AddressTypes] ([Name]);


GO
PRINT N'Creating [dbo].[FK_Address_Applicant]...';


GO
ALTER TABLE [dbo].[Address] WITH NOCHECK
    ADD CONSTRAINT [FK_Address_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_AlternateNames_Applicant]...';


GO
ALTER TABLE [dbo].[AlternateNames] WITH NOCHECK
    ADD CONSTRAINT [FK_AlternateNames_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_Applicant_EthnicityTypes]...';


GO
ALTER TABLE [dbo].[Applicant] WITH NOCHECK
    ADD CONSTRAINT [FK_Applicant_EthnicityTypes] FOREIGN KEY ([Ethnicity]) REFERENCES [dbo].[EthnicityTypes] ([Name]);


GO
PRINT N'Creating [dbo].[FK_Applicant_GenderTypes]...';


GO
ALTER TABLE [dbo].[Applicant] WITH NOCHECK
    ADD CONSTRAINT [FK_Applicant_GenderTypes] FOREIGN KEY ([Gender]) REFERENCES [dbo].[GenderTypes] ([Name]);


GO
PRINT N'Creating [dbo].[FK_Application_Applicant]...';


GO
ALTER TABLE [dbo].[Application] WITH NOCHECK
    ADD CONSTRAINT [FK_Application_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_Application_ConsiderationTypes]...';


GO
ALTER TABLE [dbo].[Application] WITH NOCHECK
    ADD CONSTRAINT [FK_Application_ConsiderationTypes] FOREIGN KEY ([Consideration]) REFERENCES [dbo].[ConsiderationTypes] ([Name]);


GO
PRINT N'Creating [dbo].[FK_Application_StatusTypes]...';


GO
ALTER TABLE [dbo].[Application] WITH NOCHECK
    ADD CONSTRAINT [FK_Application_StatusTypes] FOREIGN KEY ([Status]) REFERENCES [dbo].[StatusTypes] ([Name]);


GO
PRINT N'Creating [dbo].[FK_DisabledDocument_Applicant]...';


GO
ALTER TABLE [dbo].[DisabledDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_DisabledDocument_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_DisabledDocument_DocumentType]...';


GO
ALTER TABLE [dbo].[DisabledDocument] WITH NOCHECK
    ADD CONSTRAINT [FK_DisabledDocument_DocumentType] FOREIGN KEY ([DocumentType]) REFERENCES [dbo].[DocumentType] ([Name]);


GO
PRINT N'Creating [dbo].[FK_Education_Applicant]...';


GO
ALTER TABLE [dbo].[Education] WITH NOCHECK
    ADD CONSTRAINT [FK_Education_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_Education_Application]...';


GO
ALTER TABLE [dbo].[Education] WITH NOCHECK
    ADD CONSTRAINT [FK_Education_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[Application] ([id]);


GO
PRINT N'Creating [dbo].[FK_Phone_Applicant]...';


GO
ALTER TABLE [dbo].[Phone] WITH NOCHECK
    ADD CONSTRAINT [FK_Phone_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_Phone_PhoneTypes]...';


GO
ALTER TABLE [dbo].[Phone] WITH NOCHECK
    ADD CONSTRAINT [FK_Phone_PhoneTypes] FOREIGN KEY ([PhoneType]) REFERENCES [dbo].[PhoneTypes] ([Name]);


GO
PRINT N'Creating [dbo].[FK_PreviousEmployer_Address]...';


GO
ALTER TABLE [dbo].[PreviousEmployer] WITH NOCHECK
    ADD CONSTRAINT [FK_PreviousEmployer_Address] FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([id]);


GO
PRINT N'Creating [dbo].[FK_PreviousEmployer_Applicant]...';


GO
ALTER TABLE [dbo].[PreviousEmployer] WITH NOCHECK
    ADD CONSTRAINT [FK_PreviousEmployer_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_PreviousEmployer_Application]...';


GO
ALTER TABLE [dbo].[PreviousEmployer] WITH NOCHECK
    ADD CONSTRAINT [FK_PreviousEmployer_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[Application] ([id]);


GO
PRINT N'Creating [dbo].[FK_PreviousEmployer_Phone]...';


GO
ALTER TABLE [dbo].[PreviousEmployer] WITH NOCHECK
    ADD CONSTRAINT [FK_PreviousEmployer_Phone] FOREIGN KEY ([SupervisorPhoneId]) REFERENCES [dbo].[Phone] ([id]);


GO
PRINT N'Creating [dbo].[FK_References_Applicant]...';


GO
ALTER TABLE [dbo].[References] WITH NOCHECK
    ADD CONSTRAINT [FK_References_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_References_Application]...';


GO
ALTER TABLE [dbo].[References] WITH NOCHECK
    ADD CONSTRAINT [FK_References_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[Application] ([id]);


GO
PRINT N'Creating [dbo].[FK_ServiceRecord_Applicant]...';


GO
ALTER TABLE [dbo].[ServiceRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_ServiceRecord_Applicant] FOREIGN KEY ([ApplicantId]) REFERENCES [dbo].[Applicant] ([id]);


GO
PRINT N'Creating [dbo].[FK_ServiceRecord_Application]...';


GO
ALTER TABLE [dbo].[ServiceRecord] WITH NOCHECK
    ADD CONSTRAINT [FK_ServiceRecord_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[Application] ([id]);


GO
PRINT N'Creating [dbo].[usp_GetObject]...';


GO
-- =============================================
-- Author:		Patrick de los Reyes
-- Create date: 2018-06-28
-- Description:	Reference the appropriate view based on a JSON object and return the results
-- =============================================
CREATE PROCEDURE usp_GetObject 
	-- Add the parameters for the stored procedure here
	@Name varchar(128) = '', 
	@Parameters varchar(max) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT @Name, @Parameters
END
GO
PRINT N'Creating [dbo].[usp_InsertErrorDetails]...';


GO

CREATE PROCEDURE [dbo].[usp_InsertErrorDetails]
AS

BEGIN --> 1
  SET NOCOUNT ON 

  IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ErrorTracer')
  BEGIN --> 2
	CREATE TABLE [dbo].[ErrorTracer](
		[ErrorID] [int] IDENTITY(1,1) NOT NULL,
		[ErrorNumber] [int] NULL,
		[ErrorState] [int] NULL,
		[ErrorSeverity] [int] NULL,
		[ErrorLine] [int] NULL,
		[ErrorProc] [varchar](max) NULL,
		[ErrorMsg] [varchar](max) NULL,
		[UserName] [varchar](max) NULL,
		[HostName] [varchar](max) NULL,
		[ErrorDate] [datetime] NULL DEFAULT (getdate()),
	PRIMARY KEY CLUSTERED 
	(
		[ErrorID] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
  END --< 2

  SET XACT_ABORT ON
  
  DECLARE @ErrorNumber VARCHAR(MAX)  
  DECLARE @ErrorState VARCHAR(MAX)  
  DECLARE @ErrorSeverity VARCHAR(MAX)  
  DECLARE @ErrorLine VARCHAR(MAX)  
  DECLARE @ErrorProc VARCHAR(MAX)  
  DECLARE @ErrorMesg VARCHAR(MAX)  
  DECLARE @UserName VARCHAR(MAX)  
  DECLARE @HostName VARCHAR(MAX) 

  SELECT  @ErrorNumber	= COALESCE(ERROR_NUMBER(), 'N/A')
       ,@ErrorState		= COALESCE(ERROR_STATE(), 'N/A')
       ,@ErrorSeverity	= COALESCE(ERROR_SEVERITY(), 'N/A')
       ,@ErrorLine		= COALESCE(ERROR_LINE(), 'N/A')
       ,@ErrorProc		= COALESCE(ERROR_PROCEDURE(), 'N/A')
       ,@ErrorMesg		= COALESCE(ERROR_MESSAGE(), 'N/A')
       ,@UserName		= COALESCE(SUSER_SNAME(), 'N/A')
       ,@HostName		= COALESCE(Host_NAME(), 'N/A')
  
	INSERT INTO ErrorTracer(ErrorNumber, ErrorState, ErrorSeverity, ErrorLine, ErrorProc, ErrorMsg, UserName, HostName, ErrorDate)  
	VALUES(@ErrorNumber
		,@ErrorState
		,@ErrorSeverity
		,@ErrorLine
		,@ErrorProc
		,@ErrorMesg
		,@UserName
		,@HostName
		,GETDATE()
		)

	-- Only send out email on production server
	IF(SERVERPROPERTY('MachineName') = '!!USER SET PRODUCTION MACHINE!!')
	BEGIN
		--
		--select the contents into an html table to return
		--
		DECLARE @tblBodyNull		VARCHAR(MAX)
		DECLARE @tblBody			VARCHAR(MAX)
		DECLARE @sBodyIntro			VARCHAR(MAX)
		DECLARE @sSubj NVARCHAR(MAX)

		SET @tblBody = CAST( (
			SELECT td = @HostName + '</td>
					<td>' + DB_NAME() + '</td>
					<td>' + @ErrorProc + '</td>
					<td>' + @ErrorLine + '</td>
					<td>' + @ErrorMesg + '</td>
					<td>' + @UserName + '</td>
					<td>' + CONVERT(VARCHAR(20), GETDATE(), 113) + '</td>'
			FOR XML PATH( 'tr' ), TYPE) AS VARCHAR(MAX))

		--
		-- prepare the body of the email with the table contents
		--
		SET @sBodyIntro = @ErrorProc + ' Generated Error while processing on ' + @@SERVERNAME
		SET @sSubj = 'ERROR on ' + @ErrorProc + ' on host: ' +  @@SERVERNAME 
		SET @tblBody = 
				@sBodyIntro + '<br /><br /><table cellpadding="2" cellspacing="2" border="1">'
				+ '<tr>
				<th>Host</th>
				<th>Database</th> 
				<th>Procedure</th>
				<th>Error Line</th>
				<th>Error Message</th> 
				<th>User</th> 
				<th>Date</th> 
				</tr>'
				+ REPLACE(REPLACE( @tblBody, '&lt;', '<' ), '&gt;', '>' )
				+ '</table>'

		--	
		-- Send email if Machine Name matches production
		--	

		EXEC [msdb].[dbo].[sp_send_dbmail] 
			@profile_name = '!!DBMAIL PROFILE NAME!!'
			,@recipients = '!!EMAIL RECIPIENT!!'				
			,@subject= @sSubj
			,@body_format = 'HTML'
			,@body= @tblBody
	END
END

IF OBJECT_ID('Proc_InsertErrorDetails') IS NOT NULL
BEGIN
    PRINT 'Procedure Proc_InsertErrorDetails Created'
END
GO
PRINT N'Creating [dbo].[usp_PostJson]...';


GO
-- =============================================
-- Author:		Patrick de los Reyes
-- Create date: 2018-06-28
-- Description:	Parse JSON object and send to appropriate queries
-- =============================================
CREATE PROCEDURE usp_PostJson
	-- Add the parameters for the stored procedure here
	@Title varchar(128) = '', 
	@JSON varchar(max) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
	IF (NOT ISJSON(@JSON) > 0)
		THROW 51000, 'Input parameter object is not valid JSON.', 1;
	
	END TRY
	BEGIN CATCH
		EXEC [dbo].[usp_InsertErrorDetails]
		THROW;
	END CATCH

    -- Return JSON object
	SELECT *
	FROM OPENJSON(@JSON);
END
GO
PRINT N'Creating [dbo].[usp_GenerateAuditTables]...';


GO

CREATE PROCEDURE [dbo].[usp_GenerateAuditTables]
	-- ***************************************** --
	-- Must match the Table Name
	-- ***************************************** --
	@TableName				varchar(128) = 'ENTER_MY_TABLE_NAME'
	-- ***************************************** --
	-- 1 will drop and recreate the audit table
	--	Anything else will not drop the audit table,
	--	null value will be set to 0.
	-- ***************************************** --
	, @AuditNameExtention	varchar(128) = '_audit'
	, @DropAuditTable		bit = 0
	, @PrintOnly			bit = 1
AS
BEGIN --> 1
	SET NOCOUNT ON
	 
	DECLARE @sql nvarchar(max)
	DECLARE @CreateStatement varchar(150)
	DECLARE @SelectKeys varchar(150)
	DECLARE @SelectFirstKey varchar(150)
	DECLARE @SelectDelKeys varchar(150)
	DECLARE @SelectKeyValues varchar(150)
	DECLARE @SelectKeyJoin varchar(150)
	DECLARE @SelectIndexKeys varchar(150)
	DECLARE @SelectInsertKeys varchar(250)
	DECLARE @TABLE_NAME sysname
	DECLARE @TABLE_SCHEMA sysname
	DECLARE @CRLF char(2)

	-- Declare temp variable to fetch records into
	DECLARE @ColumnName varchar(128)
	DECLARE @ColumnType varchar(128)
	DECLARE @ColumnLength smallint
	DECLARE @ColumnNullable varchar(10)
	DECLARE @ColumnCollation sysname
	DECLARE @ColumnPrecision tinyint
	DECLARE @ColumnScale tinyint

	SET @CRLF = Char(13) + Char(10)

	DECLARE TABLE_CURSOR CURSOR FOR
	SELECT TABLE_NAME, TABLE_SCHEMA
	FROM INFORMATION_SCHEMA.Tables 
	WHERE 
		TABLE_TYPE= 'BASE TABLE' 
			AND TABLE_NAME!= 'sysdiagrams'
			AND TABLE_NAME NOT LIKE  ('%' + @AuditNameExtention)
			AND TABLE_NAME LIKE (@TableName)

	OPEN TABLE_CURSOR
	FETCH NEXT FROM TABLE_CURSOR INTO @TABLE_NAME, @TABLE_SCHEMA
	
	WHILE @@FETCH_STATUS = 0
	BEGIN --> 2
		SELECT @CreateStatement = ''
			, @SelectKeys = ''
			, @SelectKeyJoin = ''
			, @SelectKeyValues = ''
			, @SelectDelKeys = ''
			, @SelectFirstKey = ''
			, @SelectIndexKeys = ''
			, @SelectInsertKeys = ''
									
		DECLARE TABLECOLUMNS CURSOR FOR

		SELECT KCU.COLUMN_NAME, C.DATA_TYPE, C.CHARACTER_MAXIMUM_LENGTH, C.IS_NULLABLE, C.NUMERIC_PRECISION, C.NUMERIC_SCALE
		FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KCU ON KCU.CONSTRAINT_SCHEMA = TC.CONSTRAINT_SCHEMA
			JOIN INFORMATION_SCHEMA.COLUMNS C ON KCU.COLUMN_NAME = C.COLUMN_NAME
				AND KCU.CONSTRAINT_NAME = TC.CONSTRAINT_NAME
				AND KCU.TABLE_SCHEMA = TC.TABLE_SCHEMA
				AND KCU.TABLE_NAME = TC.TABLE_NAME
		WHERE TC.CONSTRAINT_TYPE IN ('PRIMARY KEY','UNIQUE')
			AND KCU.TABLE_NAME LIKE @TABLE_NAME
			AND C.TABLE_NAME LIKE @TABLE_NAME
			AND COLUMNPROPERTY(OBJECT_ID(@TABLE_NAME),c.COLUMN_NAME,'isidentity')<>1
		ORDER BY C.ORDINAL_POSITION

		OPEN TABLECOLUMNS
		
		FETCH Next FROM TableColumns
		INTO @ColumnName, @ColumnType, @ColumnLength, @ColumnNullable, @ColumnPrecision, @ColumnScale
		
		WHILE @@FETCH_STATUS = 0
		BEGIN --> 3
			IF (@ColumnType <> 'text' and @ColumnType <> 'ntext' and @ColumnType <> 'image' and @ColumnType <> 'timestamp')
			BEGIN --> 4
		
				SELECT @CreateStatement = @CreateStatement + '[' + @ColumnName + '] [' + @ColumnType + '] '
					, @SelectKeys = @SelectKeys + '[' + @ColumnName + '], '
					, @SelectKeyValues = @SelectKeyValues + ', ''[' + @ColumnName + ']'''
					, @SelectKeyJoin = @SelectKeyJoin + 'AND i.[' + @ColumnName + '] = d.[' + @ColumnName + '] '
					, @SelectInsertKeys = @SelectInsertKeys + 'COALESCE(d.[' + @ColumnName + '], i.[' + @ColumnName + ']), '
				
				IF @ColumnType in ('binary', 'char', 'nchar', 'nvarchar', 'varbinary', 'varchar')
				BEGIN --> 5
					IF (@ColumnLength = -1)
						Set @CreateStatement = @CreateStatement + '(max) '	 	
					ELSE
						SET @CreateStatement = @CreateStatement + '(' + cast(@ColumnLength as varchar(10)) + ') '	 	
				END --< 5
		
				IF @ColumnType in ('decimal', 'numeric')
					SET @CreateStatement = @CreateStatement + '(' + cast(@ColumnPrecision as varchar(10)) + ',' + cast(@ColumnScale as varchar(10)) + ') '	 	
		
				IF @ColumnNullable = 'NO'
					SET @CreateStatement = @CreateStatement + 'NOT '	 	
		
				SET @CreateStatement = @CreateStatement + 'NULL ' + @CRLF + ' , '	 	
			END --< 4

			FETCH Next FROM TableColumns
			INTO @ColumnName, @ColumnType, @ColumnLength, @ColumnNullable, @ColumnPrecision, @ColumnScale
		END --< 3

		CLOSE TableColumns
		DEALLOCATE TableColumns

		IF LEN(@SelectKeyJoin) > 3
			SET @SelectKeyJoin = RIGHT(@SelectKeyJoin, LEN(@SelectKeyJoin) - 3)
		IF LEN(@SelectKeyValues) > 3
			SET @SelectKeyValues = '''' + RIGHT(@SelectKeyValues, LEN(@SelectKeyValues) - 3)
		SET @SelectDelKeys = 'd.' + REPLACE(@SelectKeys,', ',', d.')
		IF LEN(@SelectDelKeys) > 3
			SET @SelectDelKeys = LEFT(@SelectDelKeys,LEN(@SelectDelKeys) - 3)
		SET @SelectFirstKey = LEFT(@SelectKeys, (CHARINDEX(',',@SelectKeys,0)) - 1)
		SET @SelectIndexKeys = REPLACE(@SelectKeys, ',',' ASC,')
		SET @SelectIndexKeys = LEFT(@SelectIndexKeys, LEN(@SelectIndexKeys) - 1)

		SET @sql = ' IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME= ''' + @TABLE_NAME + @AuditNameExtention + ''') ' + @CRLF
			+ ' BEGIN ' + @CRLF
			+ '		IF (' + CAST(@DropAuditTable AS VARCHAR(1)) + ' = 1) ' + @CRLF
			+ '			 DROP TABLE ' + @TABLE_NAME + @AuditNameExtention + @CRLF
			+ ' END ' + @CRLF
		PRINT @sql
		PRINT ( @CRLF + @CRLF + ' GO ' + @CRLF + @CRLF)
		EXEC (@sql)
		SET @sql = ' IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME= ''' + @TABLE_NAME + @AuditNameExtention + ''' AND TABLE_SCHEMA = ''' + @TABLE_SCHEMA + ''') ' + @CRLF
			+ ' CREATE TABLE ' + @TABLE_SCHEMA + '.' + @TABLE_NAME + @AuditNameExtention + @CRLF
			+ ' ( AuditID [int]IDENTITY(1,1) NOT NULL ' + @CRLF
			+ ' , Type char(1) ' + @CRLF
			+ ' , ' + @CreateStatement
			+ ' FieldName varchar(128) ' + @CRLF
			+ ' , OldValue varchar(1000) ' + @CRLF
			+ ' , NewValue varchar(1000) ' + @CRLF
			+ ' , UpdateDate datetime2(3) DEFAULT (GetUTCDate()) ' + @CRLF
			+ ' , UserName varchar(128) ' + @CRLF

			+ ' , CONSTRAINT [PK_' + @TABLE_NAME + @AuditNameExtention + '] PRIMARY KEY CLUSTERED ' + @CRLF
			+ ' ( ' + @CRLF
			+ '		[AuditID] ASC ' + @CRLF
			+ '		)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] ' + @CRLF
			+ ' ) ON [PRIMARY] ' + @CRLF
			+ @CRLF
			+ ' CREATE NONCLUSTERED INDEX [IX_' + @TABLE_NAME + @AuditNameExtention + '_' + REPLACE(REPLACE(REPLACE(@SelectFirstKey,' ','_'),'[',''),']','') + '] ON [dbo].[' + @TABLE_NAME + @AuditNameExtention + '] ' + @CRLF
			+ ' (' + @CRLF
			+ @SelectIndexKeys + @CRLF
			+ ' )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ' + @CRLF

		BEGIN TRY --> 3
			PRINT @sql
			PRINT ( @CRLF + @CRLF + ' GO ' + @CRLF + @CRLF)
			IF @PrintOnly = 0
				EXEC (@sql)
		END TRY --< 3
		BEGIN CATCH --> 3
			EXEC usp_InsertErrorDetails
		END CATCH --< 3
		
		SET @sql = 'IF OBJECT_ID (''' + @TABLE_NAME + '_changeLog'', ''TR'') IS NOT NULL DROP TRIGGER ' + @TABLE_NAME + '_changeLog'
		BEGIN TRY --> 3
			PRINT @sql
			PRINT ( @CRLF + @CRLF + ' GO ' + @CRLF + @CRLF)
			IF @PrintOnly = 0
				EXEC (@sql)
		END TRY --< 3
		BEGIN CATCH --> 3
			EXEC usp_InsertErrorDetails
		END CATCH --< 3
		SET @sql = 
			' CREATE TRIGGER ' + @TABLE_NAME + '_changeLog ON ' + @TABLE_SCHEMA + '.' + @TABLE_NAME + ' FOR INSERT, UPDATE, DELETE ' + @CRLF
			+ ' AS ' + @CRLF
			+ '	DECLARE @BIT INT ' + @CRLF
			+ ' , @FIELD INT ' + @CRLF
			+ ' , @MAXFIELD INT ' + @CRLF
			+ ' , @CHAR INT ' + @CRLF
			+ '	, @FIELDNAME VARCHAR(128) ' + @CRLF
			+ ' , @TYPE CHAR(1) ' + @CRLF
			+ ' , @sql varchar(8000) ' + @CRLF
			+ ' IF EXISTS (SELECT * FROM INSERTED) ' + @CRLF
			+ ' IF EXISTS (SELECT * FROM DELETED) ' + @CRLF
			+ ' SELECT @TYPE = ''U'' ' + @CRLF
			+ ' ELSE ' + @CRLF
			+ ' SELECT @TYPE = ''I'' ' + @CRLF
			+ ' ELSE ' + @CRLF
			+ ' SELECT @TYPE = ''D'' ' + @CRLF
			+ ' SELECT * INTO #INS FROM INSERTED ' + @CRLF
			+ ' SELECT * INTO #DEL FROM DELETED ' + @CRLF
			+ ' SELECT @FIELD = 0, @MAXFIELD = MAX(column_id) FROM Sys.COLUMNS WHERE object_id = OBJECT_ID(''dbo.' + @TABLE_NAME + ''')' + @CRLF
			+ ' WHILE @FIELD < @MAXFIELD ' + @CRLF
			+ ' BEGIN ' + @CRLF
			+ ' SELECT @FIELD = MIN(column_id) FROM Sys.COLUMNS WHERE object_id = OBJECT_ID(''dbo.' + @TABLE_NAME + ''') AND column_id > @FIELD ' + @CRLF
			+ '		AND NAME NOT LIKE ''Last%'' ' + @CRLF
			+ ' IF (sys.fn_IsBitSetInBitmask(COLUMNS_UPDATED(), @field)) <> 0 OR @TYPE IN (''D'') ' + @CRLF
			+ ' BEGIN ' + @CRLF
			+ ' SELECT @fieldname = name from Sys.COLUMNS WHERE object_id = OBJECT_ID(''dbo.' + @TABLE_NAME + ''') and column_id = @field ' + @CRLF
			+ ' SET @SQL = '' INSERT INTO ' + @TABLE_NAME + @AuditNameExtention + ' ''' + @CRLF
			+ '+ '' (Type, ' + @SelectKeys + ' FieldName, OldValue, NewValue, UpdateDate, UserName) ''' + @CRLF
			+ '+ '' SELECT '''''' + @TYPE + '''''', ' + @SelectInsertKeys + ''''''' + @fieldname + '''''', d.['' + @fieldname + ''], i.['' + @fieldname + ''], GETUTCDATE(), COALESCE(i.[LastModifiedUser], SUSER_NAME()) ''' + @CRLF 
			+ '+ '' FROM #INS i ''' + @CRLF
			+ '+ ''		FULL OUTER JOIN #DEL d ON ' + @SelectKeyJoin + '''' + @CRLF
			+ '+ '' WHERE i.['' + @fieldname + ''] <> d.['' + @fieldname + '']'' ' + @CRLF
			+ '+ ''	 or (i.['' + @fieldname + ''] is null and  d.['' + @fieldname + ''] is not null) ''' + @CRLF 
			+ '+ ''	 or (i.['' + @fieldname + ''] is not null and  d.['' + @fieldname + ''] is null) ''' + @CRLF 
			+ ' EXEC(@SQL) ' + @CRLF
			+ '	 END ' + @CRLF
			+ ' END ' + @CRLF
			+ @CRLF
		BEGIN TRY --> 3
			PRINT @sql
			PRINT ( @CRLF + @CRLF + ' GO ' + @CRLF + @CRLF)
			IF @PrintOnly = 0
				EXEC (@sql)
		END TRY --< 3
		BEGIN CATCH --> 3
			EXEC usp_InsertErrorDetails
		END CATCH --< 3
		FETCH NEXT FROM TABLE_CURSOR INTO @TABLE_NAME, @TABLE_SCHEMA
	END --> 2	
	CLOSE TABLE_CURSOR
	DEALLOCATE TABLE_CURSOR
END --< 1
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Address] WITH CHECK CHECK CONSTRAINT [FK_Address_AddressTypes];

ALTER TABLE [dbo].[Address] WITH CHECK CHECK CONSTRAINT [FK_Address_Applicant];

ALTER TABLE [dbo].[AlternateNames] WITH CHECK CHECK CONSTRAINT [FK_AlternateNames_Applicant];

ALTER TABLE [dbo].[Applicant] WITH CHECK CHECK CONSTRAINT [FK_Applicant_EthnicityTypes];

ALTER TABLE [dbo].[Applicant] WITH CHECK CHECK CONSTRAINT [FK_Applicant_GenderTypes];

ALTER TABLE [dbo].[Application] WITH CHECK CHECK CONSTRAINT [FK_Application_Applicant];

ALTER TABLE [dbo].[Application] WITH CHECK CHECK CONSTRAINT [FK_Application_ConsiderationTypes];

ALTER TABLE [dbo].[Application] WITH CHECK CHECK CONSTRAINT [FK_Application_StatusTypes];

ALTER TABLE [dbo].[DisabledDocument] WITH CHECK CHECK CONSTRAINT [FK_DisabledDocument_Applicant];

ALTER TABLE [dbo].[DisabledDocument] WITH CHECK CHECK CONSTRAINT [FK_DisabledDocument_DocumentType];

ALTER TABLE [dbo].[Education] WITH CHECK CHECK CONSTRAINT [FK_Education_Applicant];

ALTER TABLE [dbo].[Education] WITH CHECK CHECK CONSTRAINT [FK_Education_Application];

ALTER TABLE [dbo].[Phone] WITH CHECK CHECK CONSTRAINT [FK_Phone_Applicant];

ALTER TABLE [dbo].[Phone] WITH CHECK CHECK CONSTRAINT [FK_Phone_PhoneTypes];

ALTER TABLE [dbo].[PreviousEmployer] WITH CHECK CHECK CONSTRAINT [FK_PreviousEmployer_Address];

ALTER TABLE [dbo].[PreviousEmployer] WITH CHECK CHECK CONSTRAINT [FK_PreviousEmployer_Applicant];

ALTER TABLE [dbo].[PreviousEmployer] WITH CHECK CHECK CONSTRAINT [FK_PreviousEmployer_Application];

ALTER TABLE [dbo].[PreviousEmployer] WITH CHECK CHECK CONSTRAINT [FK_PreviousEmployer_Phone];

ALTER TABLE [dbo].[References] WITH CHECK CHECK CONSTRAINT [FK_References_Applicant];

ALTER TABLE [dbo].[References] WITH CHECK CHECK CONSTRAINT [FK_References_Application];

ALTER TABLE [dbo].[ServiceRecord] WITH CHECK CHECK CONSTRAINT [FK_ServiceRecord_Applicant];

ALTER TABLE [dbo].[ServiceRecord] WITH CHECK CHECK CONSTRAINT [FK_ServiceRecord_Application];


GO
PRINT N'Update complete.';


GO
